#!/usr/bin/env python
from __future__ import print_function

from collections import defaultdict
from pandaemonium import PidLockFile, AlreadyLocked
from scandir import scandir
from scription import Script, Command, Main, OrmFile, mail, REQUIRED, OPTION, MULTI
from scription import *
from syslog import syslog
from VSS import Date, DateTime
from VSS.BBxXlate.fisData import fisData
from VSS.path import Path
from VSS.time_machine import PropertyDict
from VSS.utils import ProgressBar, Enum, IntEnum, AutoEnum
from VSS.openerp import get_records
import logging
import openerplib
import shutil
import socket
import time
import xmlrpclib

logging.basicConfig(
        filename='/var/log/openerp/fnx_sr',
        level=logging.WARNING,
        format='%(process)06d %(asctime)s %(name)-25s %(message)s',
        )

SOURCE = Path('/var/fis/')
ARCHIVE = Path('/var/openerp/archive/shipping/')
ERRORS = Path('/var/openerp/archive/shipping/error')
CONFIG = Path('/etc/openerp/fnx.ini')

try:
    settings = OrmFile(CONFIG, section='openerp')
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', verbose=0)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
else:
    HOST = settings.host
    USER = settings.user
    DB = settings.db
    PW = settings.pw

@Script(
        host=('host where OpenERP instance is running', OPTION),
        db=('database to use', OPTION),
        user=('login name to use', OPTION),
        pw=('password for login name', OPTION),
        )
def main(host, db, user, pw):
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB', 'PW'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)

@Command(
        remove=('remove identical duplicates', 'flag', ),
        )
def find_duplicates(remove=False):
    """Look for duplicate orders; print any found"""
    connect_oe(HOST, DB, USER, PW)
    records = OE.fnx_shipping.search_read(fields=['id', 'local_source_document'], )
    order_numbers = set()
    duplicates = list()
    removed = list()
    removed_ids = list()
    pb = ProgressBar(len(records), message="processing %d records" % len(records))
    for sr in records:
        pb.tick()
        sr = PropertyDict(sr)
        if sr.local_source_document in order_numbers:
            duplicates.append(sr.local_source_document)
        else:
            order_numbers.add(sr.local_source_document)
    if not duplicates:
        print('\nNo duplicates found.\n', verbose=0)
    else:
        print('\n%d duplicates found in %d orders:\n' % (len(duplicates), len(records)), verbose=0)
        if remove:
            pb = ProgressBar(len(duplicates), message='checking %d records' % len(duplicates))
            for dup in duplicates:
                pb.tick()
                dups = OE.fnx_shipping.search_read(domain=[('local_source_document','=',dup)])
                if len(dups) > 2:
                    continue
                d0 = PropertyDict(dups[0])
                d1 = PropertyDict(dups[1])
                d0_state = OrderState[d0.state]
                d1_state = OrderState[d1.state]
                d0_msgs = len(d0.message_ids)
                d1_msgs = len(d1.message_ids)
                if ( ( d0_state != complete and d1_state == complete)
                  or ( d0_state == complete and d1_state != complete)
                  ):
                    removed.append(d0.local_source_document)
                    removed_ids.append(d0.id)
                elif d0_state > d1_state:
                    removed.append(d1.local_source_document)
                    removed_ids.append(d1.id)
                elif d1_state > d0_state:
                    removed.append(d0.local_source_document)
                    removed_ids.append(d0.id)
                elif d0_msgs > d1_msgs:
                    removed.append(d1.local_source_document)
                    removed_ids.append(d1.id)
                elif d1_msgs > d0_msgs:
                    removed.append(d0.local_source_document)
                    removed_ids.append(d0.id)
                else:
                    d0_id = d0.pop('id')
                    d1_id = d1.pop('id')
                    d0.pop('message_ids')
                    d1.pop('message_ids')
                    if d0 == d1:
                        removed.append(d1.local_source_document)
                        removed_ids.append(d1_id)
            if removed:
                duplicates = [lsd for lsd in duplicates if lsd not in removed]
                OE.fnx_shipping.unlink(removed_ids)
                print('\n', verbose=0)
            for r in removed:
                print('\t', r, verbose=0)
            print('\n\nremaining...', verbose=0)
        for dup in sorted(duplicates):
            print('\t', dup, verbose=0)


@Command()
def fix_carriers():
    """
    compare OE values for carrier with values in files -- if OE value is '99'
    and file value is not, set to file value
    """
    connect_oe(HOST, DB, USER, PW)
    records = OE.res_partner.search_read(fields=['id'], domain=[('module','=',fis_module['carrier']),('xml_id','=','99')])
    unknown_id = records[0]['id']
    records = OE.res_partner.search_read(fields=['id','xml_id'], domain=[('module','=',fis_module['carrier'])])
    shippers = {}
    for rec in records:
        shippers[rec['xml_id']] = rec['id']
    shipping_records = OE.fnx_shipping.search_read(
            fields=['id','carrier_id','local_source_document'],
            domain=['|',('carrier_id.id','=',unknown_id),('carrier_id','=',False)])
    pb = ProgressBar(len(shipping_records), message="processing %d records" % len(shipping_records))
    for sr in shipping_records:
        pb.tick()
        sr = PropertyDict(sr)
        source_files = sorted((ARCHIVE / sr.local_source_document + '*').glob())
        order = PropertyDict()
        for sf in source_files:
            settings = get_order(sf)
            order.update(settings)
        carrier_xmlid = order.get('carrier_xmlid')
        if carrier_xmlid in shippers:
            carrier_id = shippers[carrier_xmlid]
            values = {'carrier_id':carrier_id}
            OE.fnx_shipping.write([sr.id], values)


@Command()
def info():
    print('loading OPAR', verbose=0)
    opar = fisData(54, subset='10%6s%6s')
    print('total OPAR records:', len(opar), verbose=0)
    opar_company = fisData(54, subset='%2s')
    print('OPAR possible matches:', len(opar_company.get_subset(('10',))), verbose=0)
    connect_oe(HOST, DB, USER, PW)
    print('getting partner records', verbose=0)
    partners = dict([
            (r.id, r.xml_id)
            for r in get_records(
                OE.res_partner,
                fields=['id', 'xml_id'],
                )
            ])
    print('getting orders', verbose=0)
    all_orders = get_records(
            OE.fnx_shipping,
            fields=['id', 'state', 'name', 'direction', 'appointment_date', 'partner_id', 'local_source_document'],
            )
    month = defaultdict(lambda: dict(total=0, outgoing=0, incoming=0, opar=0, draft=0, ready=0, loading=0, complete=0, cancelled=0, unknown=0))
    totals = dict(total=0, outgoing=0, incoming=0, opar=0, draft=0, ready=0, loading=0, complete=0, cancelled=0, unknown=0)
    pb = ProgressBar(len(all_orders), message="tallying orders")
    for order in all_orders:
        pb.tick()
        appt = order.appointment_date and order.appointment_date[:7] or False
        if opar.get_subset((partners[order.partner_id[0]], order.local_source_document)):
            month[appt]['opar'] += 1
            totals['opar'] += 1
        month[appt]['total'] += 1
        month[appt][order.direction] += 1
        if order.direction == 'outgoing':
            month[appt][order.state or 'unknown'] += 1
            totals[order.state or 'unknown'] += 1
        totals[order.direction] += 1
        totals['total'] += 1
    print('        | incoming  outgoing | open a/r | draft  ready  loading  complete  cancelled  unknown | totals', verbose=0)
    print('------- + --------  -------- + -------- + -----  -----  -------  --------  ---------  ------- + ------', verbose=0)
    template = '%(month)7s | %(incoming)8s  %(outgoing)8d | %(opar)8s | %(draft)5d  %(ready)5d  %(loading)7d  %(complete)8d  %(cancelled)9d  %(unknown)7d | %(total)6d'
    for month, counts in sorted(month.items()):
        counts['month'] = month or 'missing'
        print(template % counts, verbose=0)
    print('------- + --------  -------- + -----  -----  -------  --------  --------- + ------ + ------', verbose=0)
    template = '%(month)7s | %(incoming)8s  %(outgoing)8d | %(opar)8s | %(draft)5d  %(ready)5d  %(loading)7d  %(complete)8d  %(cancelled)9d  %(unknown)7d | %(total)6d'
    totals['month'] = 'all'
    print(template % totals, verbose=0)



@Command(
        values=('settings to use', ),
        )
def manual_update(**values):
    # values that need to be converted from str:
    #    local_contact -> list
    connect_oe(HOST, DB, USER, PW)
    lc = values.pop('local_contact', None)
    if lc is not None:
        values['local_contact'] = lc.split(',')
    update_order(PropertyDict(values))


@Command()
def missing_check():
    connect_oe(HOST, DB, USER, PW)
    orders = dict(
            (item.local_source_document, item)
            for item in get_records(OE.fnx_shipping, fields=['id', 'local_source_document', 'partner_id'])
            )
    processed = [name.split('_')[0] for name in ARCHIVE.listdir()]
    for order in processed:
        if order not in orders:
            print(order, verbose=0)
    print(verbose=0)


@Command(
        dryrun=('display affected records instead of deleting them', FLAG),
        )
def purge(dryrun):
    """
    removes completed or out-of-date orders and their interface files

    criteria:
    - shipping, complete, more than 3 months old, and not in OPAR; or
    - receiving, complete, and more than 6 months old; or
    - more than 1 year old
    """
    print('connecting to %s:%s' % (HOST, DB))
    connect_oe(HOST, DB, USER, PW)
    print('loading OPAR')
    opar = fisData(54, subset='10%6s%6s')
    print('total OPAR records:', len(opar))
    opar_company = fisData(54, subset='%2s')
    print('OPAR possible matches:', len(opar_company.get_subset(('10',))))
    fields = ['id', 'local_source_document', 'partner_id']
    print('getting candidate shipped orders')
    shipped_orders = get_records(
            OE.fnx_shipping,
            domain=[('direction','=','outgoing'),('state','in',['complete','cancelled']),('appointment_date','<','Month6')],
            fields=fields,
            )
    print('getting candidate received orders')
    received_orders = get_records(
            OE.fnx_shipping,
            domain=[('direction','=','incoming'),('state','in',['complete','cancelled']),('appointment_date','<','Month6')],
            fields=fields,
            )
    print('getting aged-out incomplete orders')
    dead_orders = get_records(
            OE.fnx_shipping,
            domain=[('state','not in',['complete','cancelled']),('appointment_date','<','Month12')],
            fields=fields,
            )
    print('getting partner records')
    partners = dict([
            (r.id, r.xml_id)
            for r in get_records(
                OE.res_partner,
                fields=['id', 'xml_id'],
                )
            ])
    # check each shipped order to make sure it does not have an
    # open A/R invoice attached
    dead_lsds = []
    pb = ProgressBar(len(shipped_orders)+len(received_orders)+len(dead_orders), message="calculating dead orders")
    dead_shipped_ids = []
    dead_received_ids = []
    dead_ids = []
    for id_tracker, id_source, check_inv in (
            (dead_shipped_ids, shipped_orders, True),
            (dead_received_ids, received_orders, False),
            (dead_ids, dead_orders, False),
            ):
        pb.tick()
        for record in id_source:
            if check_inv and opar.get_subset((partners[record.partner_id[0]], record.local_source_document)):
                # open A/R invoices exist
                continue
            id_tracker.append(record.id)
            dead_lsds.append(record.local_source_document)
    if dryrun:
        print('%d shipped candidates' % len(shipped_orders), verbose=0)
        print('%d dead shipped' % len(dead_shipped_ids), verbose=0)
        print('%d dead receivables' % len(received_orders), verbose=0)
        print('%d dead dead' % len(dead_orders), verbose=0)
        all_orders = set([o.local_source_document for o in get_records(OE.fnx_shipping, fields=['local_source_document'])])
        orphaned_count = 0
        for folder in (ARCHIVE, ERRORS):
            seen = set()
            for entry in scandir(folder):
                entry = Path(entry.path)
                stem = entry.filename.split('_')[0]
                if stem not in seen:
                    orphaned_count += 1
        print('%d orphaned files' % orphaned_count, verbose=0)
    else:
        # delete the old stuff
        # starting with the dead shipped
        print('removing %d shipped orders' % len(dead_shipped_ids))
        OE.fnx_shipping.unlink(dead_shipped_ids)
        # and the old purchased orders
        print('removing %d received orders' % len(dead_received_ids))
        OE.fnx_shipping.unlink(dead_received_ids)
        # and the seriously old stuff
        print('removing %d very old orders' % len(dead_ids))
        OE.fnx_shipping.unlink(dead_ids)
        # and then the interface files
        for lsd in dead_lsds:
            ARCHIVE.unlink(lsd + '_*')
            ERRORS.unlink(lsd + '_*')
        all_orders = set([o.local_source_document for o in get_records(OE.fnx_shipping, fields=['local_source_document'])])
        orphaned = set()
        orphaned_count = 0
        for folder in (ARCHIVE, ERRORS):
            seen = set()
            for entry in scandir(folder):
                entry = Path(entry.path)
                stem = entry.filename.split('_')[0]
                if stem not in seen:
                    orphaned.add(entry)
                    orphaned_count += 1
        print('removing %d orphaned files' % orphaned_count)
        for entry in orphaned:
            entry.unlink('*')


@Command(
        file_to_process=('order to add/update in system', MULTI, 'f', Path, ),
        date=('reprocess all files from <date>', MULTI, 'd', Date, ),
        )
def reprocess(file_to_process, date):
    if not (file_to_process or date):
        raise SystemExit('either file(s) or date(s) must be specified')
    if file_to_process:
        files = [ARCHIVE/f for f in file_to_process]
    else:
        files = [
                f
                for f in get_files(ARCHIVE)
                if DateTime.fromtimestamp(f.stat().st_mtime).date() in date
                ]
    failed = []
    for file in files:
        try:
            order = get_order(file)
            update_order(order)
        except Exception, exc:
            failed.append((str(exc), file))
    if failed:
        raise Exception("Unable to re-process orders:\n\t%s" % '\n\t'.join(failed))

@Command()
def reprocess_error():
    """
    goes through the errors directory and reprocesses any orders that are
    either missing or still open
    """
    connect_oe(HOST, DB, USER, PW)
    print('gathering orders from OpenERP...')
    orders = dict(
            (item.local_source_document, item)
            for item in get_records(OE.fnx_shipping, fields=['id', 'local_source_document', 'partner_id', 'state'])
            )
    candidates = ERRORS.glob('*')
    candidates.sort(key=lambda c: c.stat().st_ctime)
    for mishap in candidates:
        try:
            order = get_order(mishap)
        except BadFormat:
            continue
        oe_order = orders.get(order.local_source_document)
        if order.local_source_document[0].isalpha():
            # weird stuff, skip it
            continue
        if oe_order is not None and oe_order.state in ('complete', 'cancelled'):
            # it's closed, don't sweat it
            continue
        print('updating %s' % order.local_source_document)
        try:
            update_order(order)
        except MissingPartner:
            continue


@Command(
        date=('start date for missing orders', REQUIRED, 'd', Date),
        )
def reprocess_missing(date):
    connect_oe(HOST, DB, USER, PW)
    print('gathering orders from OpenERP...',)
    orders = dict(
            (item.local_source_document, item)
            for item in get_records(OE.fnx_shipping, fields=['id', 'local_source_document', 'partner_id'])
            )
    print('(%d found)' % len(orders), orders.keys()[:10])
    print('gathering all orders from %s till today...' % date,)
    processed_ids = dict(
            (name.filename.split('_')[0], name)
            for name in (ARCHIVE/'*').glob()
            if Date.fromtimestamp(name.stat().st_ctime) >= date and not name.endswith('/error')
            )
    print('(%d found)' % len(processed_ids), processed_ids.keys()[:10])
    lock = PidLockFile('/var/run/fnxsr-order_update.pid', timeout=300)
    lock.seal()
    i = 0
    for order_id, order_file in sorted(processed_ids.items()):
        if order_id not in orders:
            print('re-adding order', order_id)
            i += 1
            order = get_order(order_file)
            update_order(order)
            order_file_timestamp = order_file.stat().st_ctime
            error_updates = sorted([
                    name
                    for name in (ERRORS/order_id+'*').glob()
                    if name.stat().st_ctime > order_file_timestamp
                    ])
            for err_update in error_updates:
                print('re-adding error', err_update)
                order = get_order(err_update)
                update_order(order)
            print()
            if i % 10:
                lock.release()
                print('letting system get a word in edgewise...')
                time.sleep(90)
                lock.seal()
                print('okay, processing some more')
    lock.release()


@Command(
        file=('order to add/update in system', OPTION, 'f', Path),
        directory=('directory of orders to add/update in system', OPTION, 'd', Path),
        )
def update(file, directory=SOURCE):
    """
    Add files with the structure of

        order={
          'appointment_date': '20140107',
          'carrier_xmlid': '99',
          'cartons': '9',
          'direction': 'outgoing',
          'local_contact': ['sysadmin', 'rgiannini', 'ethan'],
          'local_source_document': '999999',
          'pallets': 0,
          'partner_source_document': 'PO TEST',
          'partner_xmlid': 'AWGRO',
          'weight': '139',
          }

    to OpenERP.FnxSR.
    """
    if file:
        files = [file]
        lock = None
    else:
        try:
            lock = PidLockFile('/var/run/fnxsr-order_update.pid', timeout=30)
            lock.seal()
        except AlreadyLocked:
            return
        files = get_files(directory)
        if not files:
            lock.release()
            return
    for _ in range(30):
        # keep trying to get a connection for 30 minutes
        try:
            connect_oe(HOST, DB, USER, PW)
            break
        except socket.error:
            time.sleep(60)
    else:
        if lock:
            lock.release()
        return
    try:
        retry = []
        failed = []
        failures = False
        for group in ((files, failed), ):
            time.sleep(5)
            trying, failing = group
            for file in trying:
                try:
                    order = get_order(file)
                    if order.local_source_document[0].isalpha():
                        dest = ERRORS
                    else:
                        update_order(order)
                        dest = ARCHIVE
                except (BadFormat, MissingPartner, ), exc:
                    print('%s: %s' % (file, exc.message or exc.args), file=stderr)
                    # failing.append('%s: %s' % (file, exc.message or exc.args))
                    dest = ERRORS
                    failures = True
                except (IOError, ), exc:
                    print('%s: %s' % (file, exc.message or exc.args), file=stderr)
                    # failing.append('%s: %s' % (file, exc.message or exc.args))
                    dest = None
                    failures = True
                    continue
                if dest:
                    archive(file, dest)
        if failures:
            # raise Exception("Unable to process orders:\n\t%s" % '\n\t'.join(failed))
            raise SystemExit(-1)
    finally:
        if lock:
            lock.release()


OE = PropertyDict()

fis_module = {
    'incoming': 'F163',
    'outgoing': 'F33',
    'carrier':  'F27',
    }

class OrderState(IntEnum):
    draft = 1
    scheduled = 2
    appt = 3
    ready = 4
    checked_in = 5
    complete = 6
    cancelled = 7
globals().update(OrderState.__members__)

class BadFormat(Exception):
    "order is incomplete"

class MissingPartner(Exception):
    "unable to find partner"

def archive(src_file, dest=ARCHIVE):
    src_file = Path(src_file)
    basename = src_file.filename.split('_')[0]
    existing = dest.glob(basename+'*')
    existing.sort()
    if not existing or '_' not in existing[-1]:
        dst_file = dest/basename + '_01'
    else:
        dst_file, count = existing[-1].split('_')
        count = int(count) + 1
        dst_file += '_%02d' % count
    shutil.move(src_file, dst_file)

def get_order(order):
    g = {}
    try:
        execfile(order, g)
    except SyntaxError, exc:
        raise BadFormat(str(exc))
    if 'order' not in g:
        raise BadFormat('empty file?')
    return PropertyDict(g['order'])

def update_order(values):
    # carrier is the shipping agent
    # partner is the vendor/customer
    # partner_source_document is the vendor/customer invoice number / purchase order
    # local_source_document is the purchase order / invoice number
    # local_contact is the falcon user
    #
    # appointment_date -> 20140107
    # carrier_xmlid --> 99
    # cartons --> 9
    # direction --> outgoing
    # local_contact --> 'sysadmin', 'rgiannini', 'ethan']
    # local_source_document --> 999999
    # pallets --> 3
    # partner_source_document --> PO TEST
    # partner_xmlid --> AWGRO
    # weight --> 139
    if not values.local_source_document:
        raise BadFormat('missing local source document')
    context = PropertyDict()
    local_contacts = values.pop('local_contact', None)
    print('local_contacts:', local_contacts)
    if local_contacts is not None:
        if 'sysadmin' in local_contacts:
            local_contacts.remove('sysadmin')
        records = OE.res_users.search_read(fields=['id', 'partner_id'], domain=[('login','in',local_contacts)])
        print('found:\n', '\n'.join(repr(r) for r in records))
        values.message_follower_ids = [lc['partner_id'][0] for lc in records]
    partner_xmlid = values.pop('partner_xmlid', None)
    if partner_xmlid is not None:
        records = OE.res_partner.search_read(fields=['id', 'module', 'xml_id'], domain=[('module','=',fis_module[values.direction]),('xml_id','=',partner_xmlid)])
        if not records:
            OE.res_partner.fis_updates(partner=partner_xmlid)
            records = OE.res_partner.search_read(fields=['id', 'module', 'xml_id'], domain=[('module','=',fis_module[values.direction]),('xml_id','=',partner_xmlid)])
            if not records:
                raise MissingPartner('unable to find partner %r' % partner_xmlid)
        partner_id = records[0]['id']
        values.partner_id = context.default_partner_id =  partner_id
    carrier_xmlid = values.pop('carrier_xmlid', None)
    if carrier_xmlid not in (None, ):
        records = OE.res_partner.search_read(fields=['id'], domain=[('module','=',fis_module['carrier']),('xml_id','=',carrier_xmlid)])
        if not records:
            records = OE.res_partner.search_read(fields=['id'], domain=[('module','=',fis_module['carrier']),('xml_id','=','99')])
            if not records:
                raise MissingPartner('unable to find carrier %r' % carrier_xmlid)
        carrier_id = records[0]['id']
        values.carrier_id = carrier_id
    direction = values.get('direction')
    if direction == 'incoming':
        values.job_title = values.preposition = values.partner_source_document_type = 'purchasing'
    elif direction == 'outgoing':
        values.job_title = values.preposition = values.partner_source_document_type = 'sales'
    if 'cartons' in values:
        values.cartons = int(values.cartons) or False
    if 'pallets' in values:
        values.pallets = int(values.pallets) or False
    if 'weight' in values:
        values.weight = float(values.weight) or False
    orders = OE.fnx_shipping.search_read(fields=['id'], domain=[('local_source_document','=',values.local_source_document)])
    if len(orders) > 1:
        raise ValueError('found more than one order matching %r: %r' % (values.local_source_document, [r.id for r in orders]))
    elif len(orders) == 1:
        order = orders[0]
    else:
        order = None
    print('order:', order)
    if not order:
        if not direction:
            raise BadFormat('cannot create new document %r without a direction' % values.local_source_document)
    login = values.pop('user', None)
    if login:
        records = OE.res_users.search_read(fields=['id'], domain=[('login','=',login)])
        values.login_id = records[0]['id']
    if not order:
        try:
            print('creating:\n', values, verbose=0)
            OE.fnx_shipping.create(dict(values), context=dict(context))
        except xmlrpclib.ProtocolError, exc:
            raise BadFormat('Order %s: %s' % (order, (exc)))
        except Exception, exc:
            print(exc, file=stderr)
            raise
    else:
        try:
            print('updating:', values.items(), verbose=0)
            OE.fnx_shipping.write([order['id']], dict(values))
        except xmlrpclib.ProtocolError, exc:
            raise BadFormat('Order %s: %s' % (order, (exc)))
        except Exception, exc:
            print(exc, file=stderr)
            raise

def get_files(source=SOURCE):
    files = [source/f for f in source.listdir() if f != 'order_template']
    files.sort(key=lambda f: f.stat().st_mtime)
    return files

def connect_oe(hostname, database, user, password):
    OE.conn = conn = openerplib.get_connection(hostname=hostname, database=database, login=user, password=password)
    OE.res_partner = conn.get_model('res.partner')
    OE.res_users = conn.get_model('res.users')
    OE.fnx_shipping = conn.get_model('fnx.sr.shipping')


class F54(str, Enum):
    """
    OPAR - OPEN ACCOUNTS RECEIVABLE FILE MAINTENANC
    """
    company_id            = 'An$(1,2)'       # COMPANY CODE
    cust_no               = 'An$(3,6)'       # CUSTOMER NO.
    inv_no                = 'An$(9,6)'       # INVOICE NO.
    trans_no              = 'An$(15,6)'      # TRANSACTION NO.
    gross                 = 'An'             # GROSS (INVTY SLS)
    cash_disc             = 'Bn'             # CASH DISCOUNT
    other_charges         = 'Cn'             # OTHER CHARGES
    freight_amt           = 'Dn'             # FREIGHT AMOUNT
    net_amt               = 'En'             # NET AMOUNT
    terms_id              = 'Bn$'            # TERMS CODE
    inv_date              = 'Cn$'            # INVOICE DATE
    pymt_amt              = 'Fn'             # PAYMENT AMOUNT
    pymt_date             = 'Dn$'            # PAYMENT DATE
    disc_taken            = 'Gn'             # Discount Taken
    other_allwnc_amt      = 'Hn'             # Other Allowance Amount
    adj_id                = 'In'             # Adjustment Code
    total_drs             = 'Jn'             # Total Debits
    total_crs             = 'Kn'             # Total Credits
    company_id            = 'En$(1,2)'       # Company Code
    ship_to_id            = 'En$(3,4)'       # Ship to Code
    cust_po_no            = 'Fn$'            # Customer P.O. Number
    paid_by_chk_no        = 'Gn$'            # Paid by Check Number
    gl_acct_for_ar        = 'Hn$'            # G/L Account for A/R
    terms_date            = 'In$(1,6)'       # Terms Date
    date_posted           = 'In$(7,6)'       # Date Posted
    order_date            = 'In$(13,6)'      # Order Date
    sales_rep             = 'In$(19,4)'      # Sales Rep(from conv)
    date_shipped          = 'In$(23,6)'      # Date Shipped
    no_chg_pick_prnt_code = 'In$(29,4)'      # NO CHG,PICK,PRNT,CODE
    fin_charge            = 'In$(33,1)'      # Fin Charge(CR=yes,N=no)
    comment               = 'In$(34,10)'     # Comment



Main()
