#!/usr/bin/env python

from scription import Script, Run, log_exception, mail
from VSS import Date
from VSS.path import Path, listdir, glob
from VSS.utils import PropertyDict
import openerplib
import shutil
import time

SOURCE = Path('/var/fis/')
ARCHIVE = Path('/var/openerp/archive/shipping/')
USER_PW_DB = Path('/etc/openerp/credentials')

execfile(USER_PW_DB)

OE = PropertyDict()

module = {
    'incoming': 'F65',
    'outgoing': 'F33',
    'carrier':  'F27',
    }

def archive(file, dest=ARCHIVE):
    shutil.move(file, dest)

def get_order(order):
    g = {}
    execfile(order, g)
    return PropertyDict(g['order'])

def update_order(values):
    local_contacts = values.pop('local_contact', None)
    if local_contacts is not None:
        local_contacts = OE.res_users.search_read(fields=['id'], domain=[('login','in',local_contacts)])
        #local_contact_ids = [d['id'] for d in local_contacts]
        values.local_contact_ids = [(6, 0, [lc['id'] for lc in local_contacts])]
    partner_xmlid = values.pop('partner_xmlid', None)
    if partner_xmlid is not None:
        partner_xmlid = OE.res_partner.search_read(fields=['id', 'module', 'xml_id'], domain=[('module','=',module[values.direction]),('xml_id','=',partner_xmlid)])
        partner_id = partner_xmlid[0]['id']
        values.partner_id = partner_id
    carrier_xmlid = values.pop('carrier_xmlid', None)
    if carrier_xmlid is not None:
        carrier_xmlid = OE.res_partner.search_read(fields=['id'], domain=[('module','=',module['carrier']),('xml_id','=',carrier_xmlid)])
        carrier_id = carrier_xmlid[0]['id']
        values.carrier_id = carrier_id
    direction = values.get('direction')
    if direction == 'incoming':
        values.job_title = values.preposition = values.partner_source_document_type = 'purchasing'
    elif direction == 'outgoing':
        values.job_title = values.preposition = values.partner_source_document_type = 'sales'
    if 'cartons' in values:
        values.cartons = int(values.cartons) or False
    if 'pallets' in values:
        values.pallets = int(values.pallets) or False
    if 'weight' in values:
        values.weight = float(values.weight) or False
    orders = OE.fnx_shipping.search_read(fields=['id', 'appt_confirmed', 'state'], domain=[('local_source_document','=',values.local_source_document)])
    order = None
    for order in orders:
        break
    if not order:
        values.state = 'draft'
    elif values.pallets and order['state'] not in ('checked_in', 'complete', 'cancelled'):
        values.state = 'ready'
    if not order:
        OE.fnx_shipping.create(dict(values))
    else:
        OE.fnx_shipping.write([order['id']], dict(values))

@Script(
        file_to_process=('order to add/update in system', ),
        hostname=('host where OpenERP instance is running', ),
        db=('database to use', ),
        user=('login name to use', ),
        password=('password for login name', ),
        )
def main(file_to_process='', hostname='localhost', db=DB, user=USER, password=PW):
    if file_to_process:
        files = [file_to_process]
    else:
        files = [SOURCE/f for f in SOURCE.listdir() if f != 'order_template']

    OE.conn = conn = openerplib.get_connection(hostname='localhost', database=db, login=user, password=password)
    OE.res_partner = conn.get_model('res.partner')
    OE.res_users = conn.get_model('res.users')
    OE.fnx_shipping = conn.get_model('fnx.sr.shipping')

    retry = []
    failed = []
    for group in ((files, retry), (retry, failed)):
        time.sleep(5)
        trying, failing = group
        for file in trying:
            try:
                order = get_order(file)
                update_order(order)
                archive(file)
            except Exception:
                log_exception()
                failing.append(file)
    if failed:
        raise Exception("Unable to process orders: %r" % ', '.join(failed))

if __name__ == '__main__':
    Run()

